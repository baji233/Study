面向过程
面向函数
面向对象
	类：具有相同属性和相似行为的对象的集合
	对象：一切皆为对象
	new：在内存中开辟一块空间，并将空间的地址返回
访问修饰符
	private		私有的，只能在类的内部使用
	protected	受保护的，只能在类的内部以及其子类中访问
	public		公共的，任何地方可以使用
	缺省		不推荐
	属性一般都是private，方法一般都是public

面向对象的三个特征
	封装
		归类的过程
		
		方法的重载：
			方法名相同，参数不同，构成方法重载
			参数不同
				类型不同
				参数的个数不同
			作用：让方法的调用者更方便的调用方法
		
		构造方法：
			1.与类同名
			2.没有返回值
			3.每个类都会有一个默认的无参数的构造方法
			4.当使用new关键字创建对象时，会调用构造方法
			作用：初始化对象
			构造方法重载：可以用多种方式来创建对象
			默认构造方法：每个类声明时都会有一个默认的无参的构造方法，一旦声明新的构造方法，那么默认的方法就会失效
		
		this:永远指向调用该方法的内存空间

		static:静态
			静态方法
				可以由类名直接访问，不需要new对象出来调用
			静态属性	
				由该类所有对象共享的
		
	继承
		子类继承父类，将会拥有父类所有的属性和方法，Java是单继承
		方法重写/方法覆盖
			当子类的方法与父类同原型，则子类的方法将会覆盖/重写父类的方法
		super：指向当前对象的父类，可以获取父类的属性和方法
		final：最终的，子类无法覆盖的
			修饰类，类无法被继承
			修饰属性，属性无法被赋值
			修饰方法，方法无法被覆盖
	多态
		面向接口编程，提高程序的扩展性
		抽象方法：没有方法体的方法，需要用abstract修饰		
		抽象类：当一个类中含有抽象方法时，该类需要被声明为抽象类	
			用于继承的，使用extends
		接口：当一个类中所有的方法都是抽象方法，那么该类最好声明为接口，Java中一个类可以实现多个接口
			用于实现的，使用implements
		多态：同一个引用，指向不同的实例，调用相同的方法，产生不同的结果
			前提条件：1.要有继承
				2.向上转型
				3.方法重写/方法覆盖
		向上转型：父类的引用指向子类的实例

	异常：程序中的错误
		Error
			内部错误，程序员无需处理
		Exception
			程序中的错误
			分类：
				运行时异常：RuntimeException的子类，不需要显示的处理
				非运行时异常：Exception的子类，必须要处理
			异常处理的方式
				1.try{}catch(Exception e){}
				2.throws
			能处理掉当前异常产生的原因，使用try
			不能处理则使用throws

	垃圾回收
		当一个对象（内存空间）没有被引用所指向了，那么该对象会被JVM标记为垃圾，当JVM空闲时将会释放掉该对象（内存空间）
